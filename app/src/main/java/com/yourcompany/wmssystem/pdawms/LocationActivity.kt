package com.yourcompany.wmssystem.pdawms

import android.app.AlertDialog
import android.content.Intent
import android.graphics.BitmapFactory
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.coroutines.CoroutineScope
import java.net.URL

class LocationActivity : AppCompatActivity() {
    
    private lateinit var edtSearch: EditText
    private lateinit var btnSearch: Button
    private lateinit var btnAddLocation: Button
    private lateinit var txtLocationCount: TextView
    private lateinit var recyclerViewLocations: RecyclerView
    
    private lateinit var locationAdapter: LocationAdapter
    private val locations = mutableListOf<LocationWithStats>()
    private val allLocations = mutableListOf<LocationWithStats>()
    private var currentLocationCode: String = "" // ÂΩìÂâçÊìç‰ΩúÁöÑÂ∫ì‰ΩçÁºñÁ†Å
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_location)
        
        Log.d("WMS_LOCATION", "üìç Â∫ì‰ΩçÁÆ°ÁêÜÁïåÈù¢ÂêØÂä®")
        
        initViews()
        setupUnifiedNavBar()
        setupRecyclerView()
        setupClickListeners()
        loadLocations()
    }
    
    private fun initViews() {
        edtSearch = findViewById(R.id.edtSearch)
        btnSearch = findViewById(R.id.btnSearch)
        btnAddLocation = findViewById(R.id.btnAddLocation)
        txtLocationCount = findViewById(R.id.txtLocationCount)
        recyclerViewLocations = findViewById(R.id.recyclerViewLocations)
    }
    
    private fun setupUnifiedNavBar() {
        val navContainer = findViewById<LinearLayout>(R.id.navContainer)
        UnifiedNavBar.addToActivity(this, navContainer, "location")
    }
    
    private fun setupRecyclerView() {
        locationAdapter = LocationAdapter(locations) { location, action ->
            when (action) {
                "view" -> viewLocationDetails(location)
                "edit" -> editLocation(location)
                "delete" -> deleteLocation(location)
            }
        }
        recyclerViewLocations.layoutManager = LinearLayoutManager(this)
        recyclerViewLocations.adapter = locationAdapter
    }
    
    private fun setupClickListeners() {
        btnSearch.setOnClickListener { performSearch() }
        btnAddLocation.setOnClickListener { showAddLocationDialog() }
        
        // ÊêúÁ¥¢Ê°ÜÂõûËΩ¶ÊêúÁ¥¢
        edtSearch.setOnEditorActionListener { _, _, _ ->
            performSearch()
            true
        }
    }
    
    private fun loadLocations() {
        lifecycleScope.launch {
            try {
                Log.d("WMS_LOCATION", "üîÑ ÂºÄÂßãÂä†ËΩΩÂ∫ì‰ΩçÂàóË°®")
                
                val response = ApiClient.getApiService().getLocations(page_size = 1000)
                if (response.isSuccessful && response.body()?.success == true) {
                    val locationList = response.body()?.data ?: emptyList()
                    
                    // ËΩ¨Êç¢‰∏∫Â∏¶ÁªüËÆ°‰ø°ÊÅØÁöÑÂ∫ì‰ΩçÂàóË°®
                    val locationsWithStats = locationList.map { location: Location ->
                        LocationWithStats(
                            location = location,
                            skuCount = 0,
                            productCount = 0,
                            totalQuantity = 0
                        )
                    }.toMutableList()
                    
                    // Âä†ËΩΩÊØè‰∏™Â∫ì‰ΩçÁöÑÂ∫ìÂ≠òÁªüËÆ°‰ø°ÊÅØ
                    loadLocationStats(locationsWithStats)
                    
                } else {
                    val errorMsg = response.body()?.error_message ?: "Ëé∑ÂèñÂ∫ì‰ΩçÂàóË°®Â§±Ë¥•"
                    Log.e("WMS_LOCATION", "‚ùå Ëé∑ÂèñÂ∫ì‰ΩçÂàóË°®Â§±Ë¥•: $errorMsg")
                    Toast.makeText(this@LocationActivity, errorMsg, Toast.LENGTH_SHORT).show()
                }
                
            } catch (e: Exception) {
                Log.e("WMS_LOCATION", "‚ùå ÁΩëÁªúÈîôËØØ: ${e.message}", e)
                Toast.makeText(this@LocationActivity, "ÁΩëÁªúÈîôËØØ: ${e.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    private fun loadLocationStats(locationsWithStats: MutableList<LocationWithStats>) {
        lifecycleScope.launch {
            try {
                for (locationWithStats in locationsWithStats) {
                    val location = locationWithStats.location
                    try {
                        val response = ApiClient.getApiService().getLocationInventory(location.location_code)
                        
                        if (response.isSuccessful && response.body()?.success == true) {
                            val inventory = response.body()?.data
                            if (inventory != null) {
                                locationWithStats.skuCount = inventory.summary?.total_items ?: 0
                                locationWithStats.productCount = inventory.summary?.total_items ?: 0
                                locationWithStats.totalQuantity = inventory.summary?.total_quantity ?: 0
                            }
                        }
                    } catch (e: Exception) {
                        Log.w("WMS_LOCATION", "Ëé∑ÂèñÂ∫ì‰Ωç ${location.location_code} ÁªüËÆ°‰ø°ÊÅØÂ§±Ë¥•: ${e.message}")
                        // ÁªßÁª≠Â§ÑÁêÜ‰∏ã‰∏Ä‰∏™Â∫ì‰Ωç
                    }
                }
                
                // Êõ¥Êñ∞ÂàóË°®
                allLocations.clear()
                allLocations.addAll(locationsWithStats)
                locations.clear()
                locations.addAll(locationsWithStats)
                
                runOnUiThread {
                    locationAdapter.notifyDataSetChanged()
                    updateLocationCount()
                }
                
                Log.d("WMS_LOCATION", "‚úÖ Â∫ì‰ΩçÂàóË°®Âä†ËΩΩÂÆåÊàêÔºåÂÖ± ${locations.size} ‰∏™Â∫ì‰Ωç")
                
            } catch (e: Exception) {
                Log.e("WMS_LOCATION", "‚ùå Âä†ËΩΩÂ∫ì‰ΩçÁªüËÆ°‰ø°ÊÅØÈîôËØØ: ${e.message}", e)
            }
        }
    }
    
    private fun performSearch() {
        val query = edtSearch.text.toString().trim()
        
        if (query.isEmpty()) {
            // ÊòæÁ§∫ÊâÄÊúâÂ∫ì‰Ωç
            locations.clear()
            locations.addAll(allLocations)
        } else {
            // ËøáÊª§Â∫ì‰Ωç
            val filtered = allLocations.filter { locationWithStats ->
                val location = locationWithStats.location
                location.location_code.contains(query, ignoreCase = true) ||
                location.location_name?.contains(query, ignoreCase = true) == true ||
                location.description?.contains(query, ignoreCase = true) == true
            }
            
            locations.clear()
            locations.addAll(filtered)
        }
        
        locationAdapter.notifyDataSetChanged()
        updateLocationCount()
        
        Log.d("WMS_LOCATION", "üîç ÊêúÁ¥¢ÂÆåÊàêÔºåÂåπÈÖç ${locations.size} ‰∏™Â∫ì‰Ωç")
    }
    
    private fun updateLocationCount() {
        txtLocationCount.text = "ÂÖ± ${locations.size} ‰∏™Â∫ì‰Ωç"
    }
    
    private fun showAddLocationDialog() {
        val dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_location_form, null)
        val dialog = AlertDialog.Builder(this)
            .setTitle("Êñ∞Â¢ûÂ∫ì‰Ωç")
            .setView(dialogView)
            .setPositiveButton("Ê∑ªÂä†", null)
            .setNegativeButton("ÂèñÊ∂à", null)
            .create()
        
        dialog.setOnShowListener {
            val btnPositive = dialog.getButton(AlertDialog.BUTTON_POSITIVE)
            btnPositive.setOnClickListener {
                createLocation(dialogView, dialog)
            }
        }
        
        dialog.show()
    }
    
    private fun createLocation(dialogView: View, dialog: AlertDialog) {
        val edtLocationCode = dialogView.findViewById<EditText>(R.id.edtLocationCode)
        val edtLocationName = dialogView.findViewById<EditText>(R.id.edtLocationName)
        val edtCategory1Label = dialogView.findViewById<EditText>(R.id.edtCategory1Label)
        val edtCategory1 = dialogView.findViewById<EditText>(R.id.edtCategory1)
        val edtCategory2Label = dialogView.findViewById<EditText>(R.id.edtCategory2Label)
        val edtCategory2 = dialogView.findViewById<EditText>(R.id.edtCategory2)
        val edtDescription = dialogView.findViewById<EditText>(R.id.edtDescription)
        
        val locationCode = edtLocationCode.text.toString().trim()
        if (locationCode.isEmpty()) {
            Toast.makeText(this, "ËØ∑ËæìÂÖ•Â∫ì‰ΩçÁºñÁ†Å", Toast.LENGTH_SHORT).show()
            return
        }
        
        lifecycleScope.launch {
            try {
                val request = CreateLocationRequest(
                    location_code = locationCode,
                    location_name = edtLocationName.text.toString().trim().ifEmpty { null },
                    category1Label = edtCategory1Label.text.toString().trim().ifEmpty { null },
                    category1 = edtCategory1.text.toString().trim().ifEmpty { null },
                    category2Label = edtCategory2Label.text.toString().trim().ifEmpty { null },
                    category2 = edtCategory2.text.toString().trim().ifEmpty { null },
                    description = edtDescription.text.toString().trim().ifEmpty { null },
                    priority = 0
                )
                
                val response = ApiClient.getApiService().createLocation(request)
                
                runOnUiThread {
                    if (response.isSuccessful && response.body()?.success == true) {
                        Toast.makeText(this@LocationActivity, "Â∫ì‰ΩçÂàõÂª∫ÊàêÂäü", Toast.LENGTH_SHORT).show()
                        dialog.dismiss()
                        loadLocations() // ÈáçÊñ∞Âä†ËΩΩÂàóË°®
                    } else {
                        val errorMsg = response.body()?.error_message ?: "ÂàõÂª∫Â∫ì‰ΩçÂ§±Ë¥•"
                        Toast.makeText(this@LocationActivity, errorMsg, Toast.LENGTH_SHORT).show()
                    }
                }
                
            } catch (e: Exception) {
                runOnUiThread {
                    Toast.makeText(this@LocationActivity, "ÁΩëÁªúÈîôËØØ: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    private fun viewLocationDetails(locationWithStats: LocationWithStats) {
        showLocationInventoryDialog(locationWithStats)
    }
    
    private fun showLocationInventoryDialog(locationWithStats: LocationWithStats) {
        val dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_location_inventory_grid, null)
        val dialog = AlertDialog.Builder(this)
            .setView(dialogView)
            .setCancelable(false)
            .create()
            
        // Ëé∑ÂèñÊéß‰ª∂ÂºïÁî®
        val txtDialogTitle = dialogView.findViewById<TextView>(R.id.txtDialogTitle)
        val txtTotalSku = dialogView.findViewById<TextView>(R.id.txtTotalSku)
        val txtTotalQuantity = dialogView.findViewById<TextView>(R.id.txtTotalQuantity)
        val recyclerViewGrid = dialogView.findViewById<RecyclerView>(R.id.recyclerViewInventoryGrid)
        val btnClose = dialogView.findViewById<Button>(R.id.btnClose)
        val btnCloseDialog = dialogView.findViewById<Button>(R.id.btnCloseDialog)

        
        // ËÆæÁΩÆÊ†áÈ¢òÔºàÂè™ÊòæÁ§∫Â∫ì‰ΩçÁºñÁ†ÅÔºâ
        val location = locationWithStats.location
        txtDialogTitle.text = location.location_code
        
        // ËÆæÁΩÆÂΩìÂâçÂ∫ì‰ΩçÁºñÁ†ÅÔºå‰æõSKUÊìç‰Ωú‰ΩøÁî®
        currentLocationCode = location.location_code
        
        // ËÆæÁΩÆÁªüËÆ°‰ø°ÊÅØ
        txtTotalSku.text = "SKU: ${locationWithStats.skuCount}"
        txtTotalQuantity.text = "ÊÄªÈáè: ${locationWithStats.totalQuantity}‰ª∂"
        
        // ËÆæÁΩÆÁΩëÊ†ºÂ∏ÉÂ±ÄÁÆ°ÁêÜÂô®Ôºå‰∏ÄÊéí‰∏âÂàó
        recyclerViewGrid.layoutManager = androidx.recyclerview.widget.GridLayoutManager(this, 3)
        
        // Âä†ËΩΩÂ∫ìÂ≠òÊï∞ÊçÆ
        loadLocationInventoryForDialog(location.location_code, recyclerViewGrid, txtTotalSku, txtTotalQuantity)
        
        // ËÆæÁΩÆÁÇπÂáª‰∫ã‰ª∂
        btnClose.setOnClickListener { dialog.dismiss() }
        btnCloseDialog.setOnClickListener { dialog.dismiss() }
        
        dialog.show()
        
        // ËÆæÁΩÆÂØπËØùÊ°ÜÂ§ßÂ∞è - Êõ¥Â§ßÂ∞∫ÂØ∏
        val window = dialog.window
        window?.setLayout((resources.displayMetrics.widthPixels * 0.98).toInt(), 
                         (resources.displayMetrics.heightPixels * 0.9).toInt())
    }
    
    private fun loadLocationInventoryForDialog(
        locationCode: String, 
        recyclerView: RecyclerView,
        txtTotalSku: TextView,
        txtTotalQuantity: TextView
    ) {
        lifecycleScope.launch {
            try {
                Log.d("WMS_LOCATION", "üîÑ Âä†ËΩΩÂ∫ì‰ΩçÂ∫ìÂ≠òÂØπËØùÊ°ÜÊï∞ÊçÆ: $locationCode")
                
                val response = ApiClient.getApiService().getLocationInventory(locationCode)
                if (response.isSuccessful && response.body()?.success == true) {
                    val inventory = response.body()?.data
                    
                    if (inventory != null) {
                        runOnUiThread {
                            // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
                            val skuCount = inventory.summary?.total_items ?: 0
                            val totalQuantity = inventory.summary?.total_quantity ?: 0
                            txtTotalSku.text = "SKU: $skuCount"
                            txtTotalQuantity.text = "ÊÄªÈáè: ${totalQuantity}‰ª∂"
                            
                            // Ëé∑ÂèñÂ∫ìÂ≠òÊï∞ÊçÆÔºàAPIÂ∑≤ÁªèËøîÂõû‰∫ÜÊåáÂÆöÂ∫ì‰ΩçÁöÑÊï∞ÊçÆÔºâ
                            val items = inventory.items ?: emptyList()
                            
                            Log.d("WMS_LOCATION", "üì¶ Â∫ìÂ≠òÊï∞ÊçÆ: ÂÖ±${items.size}‰∏™SKU")
                            items.forEachIndexed { index, item ->
                                Log.d("WMS_LOCATION", "üì¶ SKU[$index]: ${item.sku_code}, Êï∞Èáè: ${item.stock_quantity}, ÂõæÁâá: ${item.image_path}")
                            }
                            
                            // ËÆæÁΩÆÂõæÁâáÁΩëÊ†ºÈÄÇÈÖçÂô®
                            Log.d("WMS_LOCATION", "üîß ÂàõÂª∫ÈÄÇÈÖçÂô®ÔºåÂÖ±${items.size}‰∏™Êù°ÁõÆ")
                            val gridAdapter = LocationInventoryGridAdapter(items) { item ->
                                showSkuOperationMenu(this@LocationActivity, item)
                            }
                            recyclerView.adapter = gridAdapter
                            Log.d("WMS_LOCATION", "üîß ÈÄÇÈÖçÂô®Â∑≤ËÆæÁΩÆÂà∞RecyclerView")
                            
                            if (items.isEmpty()) {
                                Log.w("WMS_LOCATION", "‚ö†Ô∏è Â∫ì‰Ωç $locationCode Ê≤°ÊúâÂ∫ìÂ≠òÊï∞ÊçÆ")
                            }
                        }
                        
                        Log.d("WMS_LOCATION", "‚úÖ Â∫ì‰ΩçÂ∫ìÂ≠òÂØπËØùÊ°ÜÊï∞ÊçÆÂä†ËΩΩÂÆåÊàê")
                    }
                    
                } else {
                    val errorMsg = response.body()?.error_message ?: "Ëé∑ÂèñÂ∫ì‰ΩçÂ∫ìÂ≠òÂ§±Ë¥•"
                    Log.e("WMS_LOCATION", "‚ùå Ëé∑ÂèñÂ∫ì‰ΩçÂ∫ìÂ≠òÂ§±Ë¥•: $errorMsg")
                    runOnUiThread {
                        Toast.makeText(this@LocationActivity, errorMsg, Toast.LENGTH_SHORT).show()
                    }
                }
                
            } catch (e: Exception) {
                Log.e("WMS_LOCATION", "‚ùå ÁΩëÁªúÈîôËØØ: ${e.message}", e)
                runOnUiThread {
                    Toast.makeText(this@LocationActivity, "ÁΩëÁªúÈîôËØØ: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    private fun editLocation(locationWithStats: LocationWithStats) {
        val location = locationWithStats.location
        val dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_location_form, null)
        
        // Â°´ÂÖÖÁé∞ÊúâÊï∞ÊçÆ
        dialogView.findViewById<EditText>(R.id.edtLocationCode).setText(location.location_code)
        dialogView.findViewById<EditText>(R.id.edtLocationName).setText(location.location_name ?: "")
        dialogView.findViewById<EditText>(R.id.edtCategory1Label).setText(location.category_name_1 ?: "")
        dialogView.findViewById<EditText>(R.id.edtCategory1).setText(location.category_code_1 ?: "")
        dialogView.findViewById<EditText>(R.id.edtCategory2Label).setText(location.category_name_2 ?: "")
        dialogView.findViewById<EditText>(R.id.edtCategory2).setText(location.category_code_2 ?: "")
        dialogView.findViewById<EditText>(R.id.edtDescription).setText(location.description ?: "")
        
        val dialog = AlertDialog.Builder(this)
            .setTitle("ÁºñËæëÂ∫ì‰Ωç")
            .setView(dialogView)
            .setPositiveButton("‰øùÂ≠ò", null)
            .setNegativeButton("ÂèñÊ∂à", null)
            .create()
        
        dialog.setOnShowListener {
            val btnPositive = dialog.getButton(AlertDialog.BUTTON_POSITIVE)
            btnPositive.setOnClickListener {
                updateLocation(dialogView, dialog, location)
            }
        }
        
        dialog.show()
    }
    
    private fun updateLocation(dialogView: View, dialog: AlertDialog, location: Location) {
        val edtLocationCode = dialogView.findViewById<EditText>(R.id.edtLocationCode)
        val edtLocationName = dialogView.findViewById<EditText>(R.id.edtLocationName)
        val edtCategory1Label = dialogView.findViewById<EditText>(R.id.edtCategory1Label)
        val edtCategory1 = dialogView.findViewById<EditText>(R.id.edtCategory1)
        val edtCategory2Label = dialogView.findViewById<EditText>(R.id.edtCategory2Label)
        val edtCategory2 = dialogView.findViewById<EditText>(R.id.edtCategory2)
        val edtDescription = dialogView.findViewById<EditText>(R.id.edtDescription)
        
        val locationCode = edtLocationCode.text.toString().trim()
        if (locationCode.isEmpty()) {
            Toast.makeText(this, "ËØ∑ËæìÂÖ•Â∫ì‰ΩçÁºñÁ†Å", Toast.LENGTH_SHORT).show()
            return
        }
        
        lifecycleScope.launch {
            try {
                val request = UpdateLocationRequest(
                    location_code = locationCode,
                    location_name = edtLocationName.text.toString().trim().ifEmpty { null },
                    category1Label = edtCategory1Label.text.toString().trim().ifEmpty { null },
                    category1 = edtCategory1.text.toString().trim().ifEmpty { null },
                    category2Label = edtCategory2Label.text.toString().trim().ifEmpty { null },
                    category2 = edtCategory2.text.toString().trim().ifEmpty { null },
                    description = edtDescription.text.toString().trim().ifEmpty { null },
                    priority = location.priority
                )
                
                val response = ApiClient.getApiService().updateLocation(location.location_id!!, request)
                
                runOnUiThread {
                    if (response.isSuccessful && response.body()?.success == true) {
                        Toast.makeText(this@LocationActivity, "Â∫ì‰ΩçÊõ¥Êñ∞ÊàêÂäü", Toast.LENGTH_SHORT).show()
                        dialog.dismiss()
                        loadLocations() // ÈáçÊñ∞Âä†ËΩΩÂàóË°®
                    } else {
                        val errorMsg = response.body()?.error_message ?: "Êõ¥Êñ∞Â∫ì‰ΩçÂ§±Ë¥•"
                        Toast.makeText(this@LocationActivity, errorMsg, Toast.LENGTH_SHORT).show()
                    }
                }
                
            } catch (e: Exception) {
                runOnUiThread {
                    Toast.makeText(this@LocationActivity, "ÁΩëÁªúÈîôËØØ: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    private fun deleteLocation(locationWithStats: LocationWithStats) {
        val location = locationWithStats.location
        
        AlertDialog.Builder(this)
            .setTitle("Âà†Èô§Â∫ì‰Ωç")
            .setMessage("Á°ÆÂÆöË¶ÅÂà†Èô§Â∫ì‰Ωç ${location.location_code} ÂêóÔºü\n\nÊ≥®ÊÑèÔºöÂè™ËÉΩÂà†Èô§Ê≤°ÊúâÂ∫ìÂ≠òÁöÑÂ∫ì‰Ωç„ÄÇ")
            .setPositiveButton("Âà†Èô§") { _, _ ->
                performDeleteLocation(location)
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    private fun performDeleteLocation(location: Location) {
        lifecycleScope.launch {
            try {
                val response = ApiClient.getApiService().deleteLocation(location.location_id!!)
                
                runOnUiThread {
                    if (response.isSuccessful && response.body()?.success == true) {
                        Toast.makeText(this@LocationActivity, "Â∫ì‰ΩçÂà†Èô§ÊàêÂäü", Toast.LENGTH_SHORT).show()
                        loadLocations() // ÈáçÊñ∞Âä†ËΩΩÂàóË°®
                    } else {
                        val errorMsg = response.body()?.error_message ?: "Âà†Èô§Â∫ì‰ΩçÂ§±Ë¥•"
                        Toast.makeText(this@LocationActivity, errorMsg, Toast.LENGTH_SHORT).show()
                    }
                }
                
            } catch (e: Exception) {
                runOnUiThread {
                    Toast.makeText(this@LocationActivity, "ÁΩëÁªúÈîôËØØ: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    // ÊòæÁ§∫SKUÊìç‰ΩúËèúÂçï
    private fun showSkuOperationMenu(context: android.content.Context, item: LocationInventoryItem) {
        val skuCode = item.sku_code ?: "Êú™Áü•SKU"
        val quantity = item.stock_quantity ?: 0
        val unit = item.unit ?: "‰ª∂"
        val productName = item.product_name ?: "Êú™Áü•ÂïÜÂìÅ"
        
        // ÂàõÂª∫Ëá™ÂÆö‰πâÂØπËØùÊ°Ü
        val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_sku_operation, null)
        val dialog = AlertDialog.Builder(context)
            .setView(dialogView)
            .create()
        
        // ËÆæÁΩÆÊ†áÈ¢òÂíå‰ø°ÊÅØ
        dialogView.findViewById<TextView>(R.id.txtSkuTitle).text = "SKUÊìç‰Ωú: $skuCode"
        dialogView.findViewById<TextView>(R.id.txtSkuInfo).text = "SKUÁºñÁ†Å: $skuCode\nÂ∫ìÂ≠ò: $quantity $unit\nÂïÜÂìÅ: $productName"
        
        // ËÆæÁΩÆÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
        dialogView.findViewById<Button>(R.id.btnInbound).setOnClickListener {
            dialog.dismiss()
            performInboundOperation(context, item)
        }
        
        dialogView.findViewById<Button>(R.id.btnOutbound).setOnClickListener {
            dialog.dismiss()
            performOutboundOperation(context, item)
        }
        
        dialogView.findViewById<Button>(R.id.btnInventory).setOnClickListener {
            dialog.dismiss()
            performInventoryOperation(context, item)
        }
        
        dialogView.findViewById<Button>(R.id.btnTransfer).setOnClickListener {
            dialog.dismiss()
            performTransferOperation(context, item)
        }
        
        dialogView.findViewById<Button>(R.id.btnCancel).setOnClickListener {
            dialog.dismiss()
        }
        
        dialog.show()
    }
    
    // ÂÖ•Â∫ìÊìç‰Ωú
    private fun performInboundOperation(context: android.content.Context, item: LocationInventoryItem) {
        Log.d("WMS_LOCATION", "üîÑ ÊâßË°åÂÖ•Â∫ìÊìç‰Ωú: ${item.sku_code}")
        
        val input = EditText(context).apply {
            hint = "ËØ∑ËæìÂÖ•ÂÖ•Â∫ìÊï∞Èáè"
            inputType = android.text.InputType.TYPE_CLASS_NUMBER
            setText("1")
        }
        
        AlertDialog.Builder(context)
            .setTitle("üì¶ ÂÖ•Â∫ìÊìç‰Ωú")
            .setMessage("Â∫ì‰Ωç: ${currentLocationCode}\nSKU: ${item.sku_code}\nÂΩìÂâçÂ∫ìÂ≠ò: ${item.stock_quantity} ${item.unit ?: "‰ª∂"}")
            .setView(input)
            .setPositiveButton("Á°ÆËÆ§ÂÖ•Â∫ì") { _, _ ->
                val quantity = input.text.toString().toIntOrNull() ?: 0
                if (quantity > 0) {
                    executeSkuInboundOperation(context, currentLocationCode, item, quantity)
                } else {
                    Toast.makeText(context, "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÂÖ•Â∫ìÊï∞Èáè", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // Âá∫Â∫ìÊìç‰Ωú
    private fun performOutboundOperation(context: android.content.Context, item: LocationInventoryItem) {
        Log.d("WMS_LOCATION", "üîÑ ÊâßË°åÂá∫Â∫ìÊìç‰Ωú: ${item.sku_code}")
        
        val input = EditText(context).apply {
            hint = "ËØ∑ËæìÂÖ•Âá∫Â∫ìÊï∞Èáè"
            inputType = android.text.InputType.TYPE_CLASS_NUMBER
            setText("1")
        }
        
        AlertDialog.Builder(context)
            .setTitle("üì§ Âá∫Â∫ìÊìç‰Ωú")
            .setMessage("Â∫ì‰Ωç: ${currentLocationCode}\nSKU: ${item.sku_code}\nÂΩìÂâçÂ∫ìÂ≠ò: ${item.stock_quantity} ${item.unit ?: "‰ª∂"}")
            .setView(input)
            .setPositiveButton("Á°ÆËÆ§Âá∫Â∫ì") { _, _ ->
                val quantity = input.text.toString().toIntOrNull() ?: 0
                val currentStock = item.stock_quantity ?: 0
                
                if (quantity > 0) {
                    if (quantity <= currentStock) {
                        executeSkuOutboundOperation(context, currentLocationCode, item, quantity)
                    } else {
                        Toast.makeText(context, "Âá∫Â∫ìÊï∞Èáè‰∏çËÉΩË∂ÖËøáÂΩìÂâçÂ∫ìÂ≠ò($currentStock)", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(context, "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÂá∫Â∫ìÊï∞Èáè", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // ÁõòÁÇπÊìç‰Ωú
    private fun performInventoryOperation(context: android.content.Context, item: LocationInventoryItem) {
        Log.d("WMS_LOCATION", "üîÑ ÊâßË°åÁõòÁÇπÊìç‰Ωú: ${item.sku_code}")
        
        val input = EditText(context).apply {
            hint = "ËØ∑ËæìÂÖ•ÂÆûÈôÖÁõòÁÇπÊï∞Èáè"
            inputType = android.text.InputType.TYPE_CLASS_NUMBER
            setText("${item.stock_quantity ?: 0}")
        }
        
        AlertDialog.Builder(context)
            .setTitle("üìã ÁõòÁÇπÊìç‰Ωú")
            .setMessage("Â∫ì‰Ωç: ${currentLocationCode}\nSKU: ${item.sku_code}\nÁ≥ªÁªüÂ∫ìÂ≠ò: ${item.stock_quantity} ${item.unit ?: "‰ª∂"}")
            .setView(input)
            .setPositiveButton("Á°ÆËÆ§ÁõòÁÇπ") { _, _ ->
                val actualQuantity = input.text.toString().toIntOrNull()
                if (actualQuantity != null && actualQuantity >= 0) {
                    executeSkuInventoryOperation(context, currentLocationCode, item, actualQuantity)
                } else {
                    Toast.makeText(context, "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÁõòÁÇπÊï∞Èáè", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // ËΩ¨ÁßªÊìç‰Ωú
    private fun performTransferOperation(context: android.content.Context, item: LocationInventoryItem) {
        Log.d("WMS_LOCATION", "üîÑ ÊâßË°åËΩ¨ÁßªÊìç‰Ωú: ${item.sku_code}")
        
        val input = EditText(context).apply {
            hint = "ËØ∑ËæìÂÖ•ÁõÆÊ†áÂ∫ì‰ΩçÁºñÁ†Å"
            inputType = android.text.InputType.TYPE_CLASS_TEXT
        }
        
        AlertDialog.Builder(context)
            .setTitle("üîÑ ËΩ¨ÁßªÊìç‰Ωú")
            .setMessage("Â∫ì‰Ωç: ${currentLocationCode}\nSKU: ${item.sku_code}\nÂΩìÂâçÂ∫ìÂ≠ò: ${item.stock_quantity} ${item.unit ?: "‰ª∂"}")
            .setView(input)
            .setPositiveButton("‰∏ã‰∏ÄÊ≠•") { _, _ ->
                val targetLocation = input.text.toString().trim()
                if (targetLocation.isNotEmpty()) {
                    showTransferQuantityDialog(context, item, targetLocation)
                } else {
                    Toast.makeText(context, "ËØ∑ËæìÂÖ•ÁõÆÊ†áÂ∫ì‰ΩçÁºñÁ†Å", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // ÊòæÁ§∫ËΩ¨ÁßªÊï∞ÈáèÂØπËØùÊ°Ü
    private fun showTransferQuantityDialog(context: android.content.Context, item: LocationInventoryItem, targetLocation: String) {
        val input = EditText(context).apply {
            hint = "ËØ∑ËæìÂÖ•ËΩ¨ÁßªÊï∞Èáè"
            inputType = android.text.InputType.TYPE_CLASS_NUMBER
            setText("1")
        }
        
        AlertDialog.Builder(context)
            .setTitle("üîÑ Á°ÆËÆ§ËΩ¨Áßª")
            .setMessage("‰ªéÂ∫ì‰Ωç: ${currentLocationCode}\nÂà∞Â∫ì‰Ωç: $targetLocation\nSKU: ${item.sku_code}")
            .setView(input)
            .setPositiveButton("Á°ÆËÆ§ËΩ¨Áßª") { _, _ ->
                val quantity = input.text.toString().toIntOrNull() ?: 0
                val currentStock = item.stock_quantity ?: 0
                
                if (quantity > 0) {
                    if (quantity <= currentStock) {
                        executeSkuTransferOperation(context, currentLocationCode, targetLocation, item, quantity)
                    } else {
                        Toast.makeText(context, "ËΩ¨ÁßªÊï∞Èáè‰∏çËÉΩË∂ÖËøáÂΩìÂâçÂ∫ìÂ≠ò($currentStock)", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(context, "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑËΩ¨ÁßªÊï∞Èáè", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // Êü•ÁúãËØ¶ÊÉÖ
    private fun showSkuDetails(context: android.content.Context, item: LocationInventoryItem) {
        val skuCode = item.sku_code ?: "Êú™Áü•SKU"
        val quantity = item.stock_quantity ?: 0
        val unit = item.unit ?: "‰ª∂"
        val productName = item.product_name ?: "Êú™Áü•ÂïÜÂìÅ"
        
        val message = "SKUÁºñÁ†Å: $skuCode\nÂïÜÂìÅÂêçÁß∞: $productName\nÂΩìÂâçÂ∫ìÂ≠ò: $quantity $unit"
        
        AlertDialog.Builder(context)
            .setTitle("‚ÑπÔ∏è SKUËØ¶ÊÉÖ")
            .setMessage(message)
            .setPositiveButton("Á°ÆÂÆö", null)
            .show()
    }
    
    // ÊâßË°åSKUÂÖ•Â∫ìÊìç‰Ωú
    private fun executeSkuInboundOperation(context: android.content.Context, locationCode: String, item: LocationInventoryItem, quantity: Int) {
        // TODO: Ë∞ÉÁî®ÂÖ•Â∫ìAPI
        Log.d("WMS_LOCATION", "‚úÖ SKUÂÖ•Â∫ìÊìç‰Ωú: Â∫ì‰Ωç=$locationCode, SKU=${item.sku_code}, Êï∞Èáè=$quantity")
        Toast.makeText(context, "ÂÖ•Â∫ìÊàêÂäüÔºÅ\nÂ∫ì‰Ωç: $locationCode\nSKU: ${item.sku_code}\nÊï∞Èáè: $quantity", Toast.LENGTH_LONG).show()
        
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑAPIË∞ÉÁî®
        // ApiClient.getApiService().performSkuInbound(locationCode, item.sku_code, quantity)
    }
    
    // ÊâßË°åSKUÂá∫Â∫ìÊìç‰Ωú
    private fun executeSkuOutboundOperation(context: android.content.Context, locationCode: String, item: LocationInventoryItem, quantity: Int) {
        // TODO: Ë∞ÉÁî®Âá∫Â∫ìAPI
        Log.d("WMS_LOCATION", "‚úÖ SKUÂá∫Â∫ìÊìç‰Ωú: Â∫ì‰Ωç=$locationCode, SKU=${item.sku_code}, Êï∞Èáè=$quantity")
        Toast.makeText(context, "Âá∫Â∫ìÊàêÂäüÔºÅ\nÂ∫ì‰Ωç: $locationCode\nSKU: ${item.sku_code}\nÊï∞Èáè: $quantity", Toast.LENGTH_LONG).show()
        
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑAPIË∞ÉÁî®
        // ApiClient.getApiService().performSkuOutbound(locationCode, item.sku_code, quantity)
    }
    
    // ÊâßË°åSKUÁõòÁÇπÊìç‰Ωú
    private fun executeSkuInventoryOperation(context: android.content.Context, locationCode: String, item: LocationInventoryItem, actualQuantity: Int) {
        val systemQuantity = item.stock_quantity ?: 0
        val difference = actualQuantity - systemQuantity
        
        Log.d("WMS_LOCATION", "‚úÖ SKUÁõòÁÇπÊìç‰Ωú: Â∫ì‰Ωç=$locationCode, SKU=${item.sku_code}, Á≥ªÁªüÂ∫ìÂ≠ò=$systemQuantity, ÂÆûÈôÖÂ∫ìÂ≠ò=$actualQuantity, Â∑ÆÂºÇ=$difference")
        
        val message = if (difference == 0) {
            "ÁõòÁÇπÂÆåÊàêÔºÅÂ∫ìÂ≠òÊï∞ÈáèÂáÜÁ°ÆÊó†ËØØ"
        } else {
            "ÁõòÁÇπÂÆåÊàêÔºÅÂèëÁé∞Â∑ÆÂºÇ: ${if (difference > 0) "+" else ""}$difference"
        }
        
        Toast.makeText(context, "$message\nÂ∫ì‰Ωç: $locationCode\nSKU: ${item.sku_code}", Toast.LENGTH_LONG).show()
        
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑAPIË∞ÉÁî®
        // ApiClient.getApiService().performSkuInventoryAdjustment(locationCode, item.sku_code, actualQuantity)
    }
    
    // ÊâßË°åSKUËΩ¨ÁßªÊìç‰Ωú
    private fun executeSkuTransferOperation(context: android.content.Context, fromLocation: String, toLocation: String, item: LocationInventoryItem, quantity: Int) {
        // TODO: Ë∞ÉÁî®ËΩ¨ÁßªAPI
        Log.d("WMS_LOCATION", "‚úÖ SKUËΩ¨ÁßªÊìç‰Ωú: ‰ªéÂ∫ì‰Ωç=$fromLocation, Âà∞Â∫ì‰Ωç=$toLocation, SKU=${item.sku_code}, Êï∞Èáè=$quantity")
        Toast.makeText(context, "ËΩ¨ÁßªÊàêÂäüÔºÅ\n‰ªéÂ∫ì‰Ωç: $fromLocation\nÂà∞Â∫ì‰Ωç: $toLocation\nSKU: ${item.sku_code}\nÊï∞Èáè: $quantity", Toast.LENGTH_LONG).show()
        
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑAPIË∞ÉÁî®
        // ApiClient.getApiService().performSkuTransfer(fromLocation, toLocation, item.sku_code, quantity)
    }
    
    // ÊòæÁ§∫Â∫ì‰ΩçÂÖ•Â∫ìÂØπËØùÊ°Ü
    private fun showLocationInboundDialog(location: Location) {
        val input = EditText(this).apply {
            hint = "ËØ∑ËæìÂÖ•SKUÁºñÁ†Å"
            inputType = android.text.InputType.TYPE_CLASS_TEXT
        }
        
        AlertDialog.Builder(this)
            .setTitle("üì¶ Â∫ì‰ΩçÂÖ•Â∫ì")
            .setMessage("Â∫ì‰Ωç: ${location.location_code}")
            .setView(input)
            .setPositiveButton("‰∏ã‰∏ÄÊ≠•") { _, _ ->
                val skuCode = input.text.toString().trim()
                if (skuCode.isNotEmpty()) {
                    showInboundQuantityDialog(location, skuCode)
                } else {
                    Toast.makeText(this, "ËØ∑ËæìÂÖ•SKUÁºñÁ†Å", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // ÊòæÁ§∫ÂÖ•Â∫ìÊï∞ÈáèÂØπËØùÊ°Ü
    private fun showInboundQuantityDialog(location: Location, skuCode: String) {
        val input = EditText(this).apply {
            hint = "ËØ∑ËæìÂÖ•ÂÖ•Â∫ìÊï∞Èáè"
            inputType = android.text.InputType.TYPE_CLASS_NUMBER
            setText("1")
        }
        
        AlertDialog.Builder(this)
            .setTitle("üì¶ Á°ÆËÆ§ÂÖ•Â∫ì")
            .setMessage("Â∫ì‰Ωç: ${location.location_code}\nSKU: $skuCode")
            .setView(input)
            .setPositiveButton("Á°ÆËÆ§ÂÖ•Â∫ì") { _, _ ->
                val quantity = input.text.toString().toIntOrNull() ?: 0
                if (quantity > 0) {
                    executeLocationInbound(location, skuCode, quantity)
                } else {
                    Toast.makeText(this, "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÂÖ•Â∫ìÊï∞Èáè", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // ÊòæÁ§∫Â∫ì‰ΩçÂá∫Â∫ìÂØπËØùÊ°Ü
    private fun showLocationOutboundDialog(location: Location) {
        val input = EditText(this).apply {
            hint = "ËØ∑ËæìÂÖ•SKUÁºñÁ†Å"
            inputType = android.text.InputType.TYPE_CLASS_TEXT
        }
        
        AlertDialog.Builder(this)
            .setTitle("üì§ Â∫ì‰ΩçÂá∫Â∫ì")
            .setMessage("Â∫ì‰Ωç: ${location.location_code}")
            .setView(input)
            .setPositiveButton("‰∏ã‰∏ÄÊ≠•") { _, _ ->
                val skuCode = input.text.toString().trim()
                if (skuCode.isNotEmpty()) {
                    showOutboundQuantityDialog(location, skuCode)
                } else {
                    Toast.makeText(this, "ËØ∑ËæìÂÖ•SKUÁºñÁ†Å", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // ÊòæÁ§∫Âá∫Â∫ìÊï∞ÈáèÂØπËØùÊ°Ü
    private fun showOutboundQuantityDialog(location: Location, skuCode: String) {
        val input = EditText(this).apply {
            hint = "ËØ∑ËæìÂÖ•Âá∫Â∫ìÊï∞Èáè"
            inputType = android.text.InputType.TYPE_CLASS_NUMBER
            setText("1")
        }
        
        AlertDialog.Builder(this)
            .setTitle("üì§ Á°ÆËÆ§Âá∫Â∫ì")
            .setMessage("Â∫ì‰Ωç: ${location.location_code}\nSKU: $skuCode")
            .setView(input)
            .setPositiveButton("Á°ÆËÆ§Âá∫Â∫ì") { _, _ ->
                val quantity = input.text.toString().toIntOrNull() ?: 0
                if (quantity > 0) {
                    executeLocationOutbound(location, skuCode, quantity)
                } else {
                    Toast.makeText(this, "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÂá∫Â∫ìÊï∞Èáè", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // ÊòæÁ§∫Â∫ì‰ΩçÁõòÁÇπÂØπËØùÊ°Ü
    private fun showLocationInventoryCountDialog(location: Location) {
        AlertDialog.Builder(this)
            .setTitle("üìã Â∫ì‰ΩçÁõòÁÇπ")
            .setMessage("Â∫ì‰Ωç: ${location.location_code}\n\nÂºÄÂßãÂØπËØ•Â∫ì‰ΩçËøõË°åÂÖ®Èù¢ÁõòÁÇπÔºü")
            .setPositiveButton("ÂºÄÂßãÁõòÁÇπ") { _, _ ->
                executeLocationInventoryCheck(location)
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
    
    // ÊâßË°åÂ∫ì‰ΩçÂÖ•Â∫ì
    private fun executeLocationInbound(location: Location, skuCode: String, quantity: Int) {
        Log.d("WMS_LOCATION", "‚úÖ Â∫ì‰ΩçÂÖ•Â∫ì: Â∫ì‰Ωç=${location.location_code}, SKU=$skuCode, Êï∞Èáè=$quantity")
        Toast.makeText(this, "ÂÖ•Â∫ìÊàêÂäüÔºÅ\nÂ∫ì‰Ωç: ${location.location_code}\nSKU: $skuCode\nÊï∞Èáè: $quantity", Toast.LENGTH_LONG).show()
        
        // TODO: Ë∞ÉÁî®ÂÆûÈôÖÁöÑÂÖ•Â∫ìAPI
        // ApiClient.getApiService().performLocationInbound(location.location_code, skuCode, quantity)
    }
    
    // ÊâßË°åÂ∫ì‰ΩçÂá∫Â∫ì
    private fun executeLocationOutbound(location: Location, skuCode: String, quantity: Int) {
        Log.d("WMS_LOCATION", "‚úÖ Â∫ì‰ΩçÂá∫Â∫ì: Â∫ì‰Ωç=${location.location_code}, SKU=$skuCode, Êï∞Èáè=$quantity")
        Toast.makeText(this, "Âá∫Â∫ìÊàêÂäüÔºÅ\nÂ∫ì‰Ωç: ${location.location_code}\nSKU: $skuCode\nÊï∞Èáè: $quantity", Toast.LENGTH_LONG).show()
        
        // TODO: Ë∞ÉÁî®ÂÆûÈôÖÁöÑÂá∫Â∫ìAPI
        // ApiClient.getApiService().performLocationOutbound(location.location_code, skuCode, quantity)
    }
    
    // ÊâßË°åÂ∫ì‰ΩçÁõòÁÇπ
    private fun executeLocationInventoryCheck(location: Location) {
        Log.d("WMS_LOCATION", "‚úÖ Â∫ì‰ΩçÁõòÁÇπ: Â∫ì‰Ωç=${location.location_code}")
        Toast.makeText(this, "ÁõòÁÇπÂÆåÊàêÔºÅ\nÂ∫ì‰Ωç: ${location.location_code}\nÁä∂ÊÄÅ: ÁõòÁÇπ‰∏≠...", Toast.LENGTH_LONG).show()
        
        // TODO: Ë∞ÉÁî®ÂÆûÈôÖÁöÑÁõòÁÇπAPI
        // ApiClient.getApiService().startLocationInventoryCheck(location.location_code)
    }
}

// Â∏¶ÁªüËÆ°‰ø°ÊÅØÁöÑÂ∫ì‰ΩçÊï∞ÊçÆÁ±ª
data class LocationWithStats(
    val location: Location,
    var skuCount: Int,
    var productCount: Int,
    var totalQuantity: Int
)

// Â∫ì‰ΩçÂàóË°®ÈÄÇÈÖçÂô®
class LocationAdapter(
    private val locations: MutableList<LocationWithStats>,
    private val onLocationAction: (LocationWithStats, String) -> Unit
) : RecyclerView.Adapter<LocationAdapter.LocationViewHolder>() {
    
    class LocationViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val txtLocationCode: TextView = itemView.findViewById(R.id.txtLocationCode)
        val txtLocationCategory: TextView = itemView.findViewById(R.id.txtLocationCategory)
        val txtLocationName: TextView = itemView.findViewById(R.id.txtLocationName)
        val txtDescription: TextView = itemView.findViewById(R.id.txtDescription)
        val txtSkuCount: TextView = itemView.findViewById(R.id.txtSkuCount)
        val txtProductCount: TextView = itemView.findViewById(R.id.txtProductCount)
        val txtTotalQuantity: TextView = itemView.findViewById(R.id.txtTotalQuantity)
        val btnViewDetails: Button = itemView.findViewById(R.id.btnViewDetails)
        val btnEditLocation: Button = itemView.findViewById(R.id.btnEditLocation)
        val layoutInventoryStats: LinearLayout = itemView.findViewById(R.id.layoutInventoryStats)
    }
    
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): LocationViewHolder {
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.item_location, parent, false)
        return LocationViewHolder(view)
    }
    
    override fun onBindViewHolder(holder: LocationViewHolder, position: Int) {
        val locationWithStats = locations[position]
        val location = locationWithStats.location
        
        holder.txtLocationCode.text = location.location_code
        holder.txtLocationName.text = location.location_name ?: "Êú™ÂëΩÂêç"
        holder.txtDescription.text = location.description ?: ""
        holder.txtSkuCount.text = locationWithStats.skuCount.toString()
        holder.txtProductCount.text = locationWithStats.productCount.toString()
        holder.txtTotalQuantity.text = locationWithStats.totalQuantity.toString()
        
        // ËÆæÁΩÆÂàÜÁ±ª‰ø°ÊÅØ
        val category1 = location.category_name_1 ?: "‰ªìÂ∫ì"
        val category1Val = location.category_code_1 ?: "-"
        val category2 = location.category_name_2 ?: "Ë¥ßÊû∂"
        val category2Val = location.category_code_2 ?: "-"
        holder.txtLocationCategory.text = "$category1: $category1Val / $category2: $category2Val"
        
        // ÁÇπÂáªÂ±ïÂºÄ/Êî∂Ëµ∑Â∫ìÂ≠òÁªüËÆ°
        holder.itemView.setOnClickListener {
            val isVisible = holder.layoutInventoryStats.visibility == View.VISIBLE
            holder.layoutInventoryStats.visibility = if (isVisible) View.GONE else View.VISIBLE
        }
        
        // ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
        holder.btnViewDetails.setOnClickListener {
            onLocationAction(locationWithStats, "view")
        }
        
        holder.btnEditLocation.setOnClickListener {
            onLocationAction(locationWithStats, "edit")
        }
        
        // ÈïøÊåâÂà†Èô§
        holder.itemView.setOnLongClickListener {
            onLocationAction(locationWithStats, "delete")
            true
        }
    }
    
    override fun getItemCount(): Int = locations.size
}

// Â∫ì‰ΩçÂ∫ìÂ≠òÂõæÁâáÁΩëÊ†ºÈÄÇÈÖçÂô®
class LocationInventoryGridAdapter(
    private val items: List<LocationInventoryItem>,
    private val onItemClick: (LocationInventoryItem) -> Unit
) : RecyclerView.Adapter<LocationInventoryGridAdapter.GridViewHolder>() {
    
    class GridViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val imgProduct: ImageView = itemView.findViewById(R.id.imgProduct)
        val txtSkuCode: TextView = itemView.findViewById(R.id.txtSkuCode)
        val txtQuantity: TextView = itemView.findViewById(R.id.txtQuantity)
        val txtSkuInfo: TextView = itemView.findViewById(R.id.txtSkuInfo)
        val txtColorSize: TextView = itemView.findViewById(R.id.txtColorSize)
        val txtQuantityInfo: TextView = itemView.findViewById(R.id.txtQuantityInfo)
    }
    
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GridViewHolder {
        Log.d("WMS_LOCATION", "üèóÔ∏è ÂàõÂª∫ViewHolder")
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.item_inventory_image_grid, parent, false)
        Log.d("WMS_LOCATION", "üèóÔ∏è ViewHolderÂàõÂª∫ÂÆåÊàê")
        return GridViewHolder(view)
    }
    
    override fun onBindViewHolder(holder: GridViewHolder, position: Int) {
        val item = items[position]
        
        Log.d("WMS_LOCATION", "üì¶ ÁªëÂÆöÂ∫ìÂ≠òÈ°π $position: SKU=${item.sku_code}, Êï∞Èáè=${item.stock_quantity}")
        
        // Ëß£ÊûêSKUÁºñÁ†Å
        val skuParts = item.sku_code.split("-")
        val productCode = if (skuParts.isNotEmpty()) skuParts[0] else item.sku_code
        
        // ËÆæÁΩÆSKUÁºñÁ†ÅÔºàÊòæÁ§∫ÂïÜÂìÅÁºñÁ†ÅÔºâ
        holder.txtSkuCode.text = productCode
        
        // ËÆæÁΩÆÊï∞Èáè
        holder.txtQuantity.text = item.stock_quantity.toString()
        
        // ËÆæÁΩÆÈ¢úËâ≤ÂíåÂ∞∫Á†Å‰ø°ÊÅØÔºà‰ªéSKUÁºñÁ†Å‰∏≠ÊèêÂèñÔºâ
        val colorSize = buildString {
            if (skuParts.size > 1) {
                append(skuParts[1]) // È¢úËâ≤
            }
            if (skuParts.size > 2) {
                if (isNotEmpty()) append("-")
                append(skuParts[2]) // Â∞∫ÂØ∏
            }
        }
        holder.txtColorSize.text = colorSize.ifEmpty { "Êú™Áü•ËßÑÊ†º" }
        
        // Âä†ËΩΩÂïÜÂìÅÂõæÁâá‰Ωú‰∏∫ËÉåÊôØ
        loadProductImage(item, holder.imgProduct)
        
        // ÁÇπÂáª‰∫ã‰ª∂ - ÈÄöËøáÂõûË∞ÉË∞ÉÁî®ActivityÁöÑÊñπÊ≥ï
        holder.itemView.setOnClickListener {
            try {
                Log.d("WMS_LOCATION", "üì± ÁÇπÂáªSKUÂç°Áâá: ${item.sku_code}")
                onItemClick(item)
                
            } catch (e: Exception) {
                Log.e("WMS_LOCATION", "‚ùå ÊòæÁ§∫SKUÊìç‰ΩúËèúÂçïÂ§±Ë¥•: ${e.message}", e)
                Toast.makeText(holder.itemView.context, "Êìç‰ΩúÂ§±Ë¥•", Toast.LENGTH_SHORT).show()
            }
        }
    }
    
    private fun loadProductImage(item: LocationInventoryItem, imageView: ImageView) {
        try {
            Log.d("WMS_LOCATION", "üñºÔ∏è Âä†ËΩΩÂõæÁâá - SKU: ${item.sku_code}, Êï∞Èáè: ${item.stock_quantity}")
            Log.d("WMS_LOCATION", "üì∑ ÂõæÁâáË∑ØÂæÑ: ${item.image_path}")
            
            // ËÆæÁΩÆImageView‰∏∫ËÉåÊôØÂõæÁâáÊ®°Âºè
            imageView.scaleType = ImageView.ScaleType.CENTER_CROP
            
            // Ê†πÊçÆSKUÁºñÁ†ÅÁîüÊàê‰∏çÂêåÁöÑÈªòËÆ§ÂõæÁâá
            val skuBasedImage = getSkuBasedImage(item.sku_code)
            
            // ÂÖàÊòæÁ§∫Âç†‰ΩçÂõæÁâá
            Log.d("WMS_LOCATION", "üñºÔ∏è ËÆæÁΩÆÂç†‰ΩçÂõæ: $skuBasedImage")
            imageView.setImageResource(skuBasedImage)
            
            // Ê£ÄÊü•ÊòØÂê¶ÊúâÂõæÁâáË∑ØÂæÑ
            if (!item.image_path.isNullOrBlank()) {
                // ‰ΩøÁî®ApiClientÊûÑÂª∫ÂÆåÊï¥ÁöÑÂõæÁâáURL
                val fullImageUrl = ApiClient.processImageUrl(item.image_path, imageView.context)
                Log.d("WMS_LOCATION", "üåê ÂÆåÊï¥ÂõæÁâáURL: $fullImageUrl")
                
                // Âä†ËΩΩÁΩëÁªúÂõæÁâá
                loadNetworkImage(fullImageUrl, imageView, skuBasedImage)
            } else {
                Log.d("WMS_LOCATION", "üì∑ SKU ${item.sku_code} Êó†ÂõæÁâáË∑ØÂæÑÔºå‰ΩøÁî®Âç†‰ΩçÂõæ")
            }
            
        } catch (e: Exception) {
            Log.w("WMS_LOCATION", "Âä†ËΩΩÂõæÁâáÂ§±Ë¥•: ${e.message}")
            imageView.setImageResource(android.R.drawable.ic_menu_gallery)
        }
    }
    
    private fun loadNetworkImage(imageUrl: String, imageView: ImageView, fallbackImage: Int) {
        // ‰ΩøÁî®ÂçèÁ®ãÂú®ÂêéÂè∞Á∫øÁ®ãÂä†ËΩΩÂõæÁâá
        CoroutineScope(Dispatchers.IO).launch {
            try {
                Log.d("WMS_LOCATION", "üåê ÂºÄÂßãÂä†ËΩΩÁΩëÁªúÂõæÁâá: $imageUrl")
                
                val url = java.net.URL(imageUrl)
                val connection = url.openConnection()
                connection.doInput = true
                connection.connect()
                
                val inputStream = connection.getInputStream()
                
                // ÂÖàËé∑ÂèñÂõæÁâáÂ∞∫ÂØ∏ÔºåÈÅøÂÖçÁõ¥Êé•Âä†ËΩΩÂ§ßÂõæÂØºËá¥OOM
                val options = android.graphics.BitmapFactory.Options()
                options.inJustDecodeBounds = true
                android.graphics.BitmapFactory.decodeStream(inputStream, null, options)
                inputStream.close()
                
                // ÈáçÊñ∞ÊâìÂºÄËøûÊé•Ëé∑ÂèñÂõæÁâáÊï∞ÊçÆ
                val connection2 = url.openConnection()
                connection2.doInput = true
                connection2.connect()
                val inputStream2 = connection2.getInputStream()
                
                // ËÆ°ÁÆóÂêàÈÄÇÁöÑÁº©ÊîæÊØî‰æãÔºàÁõÆÊ†áÂ∞∫ÂØ∏Ôºö200x200ÂÉèÁ¥†Ôºâ
                val targetSize = 200
                val sampleSize = calculateInSampleSize(options, targetSize, targetSize)
                
                // ‰ΩøÁî®Áº©ÊîæÊØî‰æãÂä†ËΩΩÂõæÁâá
                val decodeOptions = android.graphics.BitmapFactory.Options()
                decodeOptions.inSampleSize = sampleSize
                decodeOptions.inPreferredConfig = android.graphics.Bitmap.Config.RGB_565 // ‰ΩøÁî®Êõ¥Â∞ëÂÜÖÂ≠òÁöÑÊ†ºÂºè
                
                val bitmap = android.graphics.BitmapFactory.decodeStream(inputStream2, null, decodeOptions)
                inputStream2.close()
                
                if (bitmap != null) {
                    // Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UI
                    withContext(Dispatchers.Main) {
                        Log.d("WMS_LOCATION", "‚úÖ ÁΩëÁªúÂõæÁâáÂä†ËΩΩÊàêÂäüÔºåÂ∞∫ÂØ∏: ${bitmap.width}x${bitmap.height}")
                        imageView.setImageBitmap(bitmap)
                    }
                } else {
                    Log.w("WMS_LOCATION", "‚ö†Ô∏è ÁΩëÁªúÂõæÁâáËß£Á†ÅÂ§±Ë¥•Ôºå‰ΩøÁî®Âç†‰ΩçÂõæ")
                    withContext(Dispatchers.Main) {
                        imageView.setImageResource(fallbackImage)
                    }
                }
                
            } catch (e: OutOfMemoryError) {
                Log.e("WMS_LOCATION", "‚ùå ÂõæÁâáÂä†ËΩΩÂÜÖÂ≠òÊ∫¢Âá∫: ${e.message}")
                withContext(Dispatchers.Main) {
                    imageView.setImageResource(fallbackImage)
                }
            } catch (e: Exception) {
                Log.w("WMS_LOCATION", "‚ùå ÁΩëÁªúÂõæÁâáÂä†ËΩΩÂ§±Ë¥•: ${e.message}")
                // Âä†ËΩΩÂ§±Ë¥•Êó∂Âú®‰∏ªÁ∫øÁ®ãÊòæÁ§∫Âç†‰ΩçÂõæ
                withContext(Dispatchers.Main) {
                    imageView.setImageResource(fallbackImage)
                }
            }
        }
    }
    
    private fun calculateInSampleSize(options: android.graphics.BitmapFactory.Options, reqWidth: Int, reqHeight: Int): Int {
        val height = options.outHeight
        val width = options.outWidth
        var inSampleSize = 1
        
        if (height > reqHeight || width > reqWidth) {
            val halfHeight = height / 2
            val halfWidth = width / 2
            
            while ((halfHeight / inSampleSize) >= reqHeight && (halfWidth / inSampleSize) >= reqWidth) {
                inSampleSize *= 2
            }
        }
        
        return inSampleSize
    }
    

    
    override fun getItemCount(): Int = items.size
    
    // Ê†πÊçÆSKUÁºñÁ†ÅÁîüÊàêÂîØ‰∏ÄÁöÑÂç†‰ΩçÂõæÁâá
    private fun getSkuBasedImage(skuCode: String): Int {
        Log.d("WMS_LOCATION", "üé® ‰∏∫SKU ${skuCode} ÈÄâÊã©Âç†‰ΩçÂõæ")
        
        // Ê†πÊçÆSKU‰∏≠ÁöÑÈ¢úËâ≤‰ø°ÊÅØÈÄâÊã©ÂØπÂ∫îÁöÑÂõæÊ†á
        val drawable = when {
            skuCode.contains("ÈªëËâ≤", true) -> {
                Log.d("WMS_LOCATION", "üñ§ Ê£ÄÊµãÂà∞ÈªëËâ≤Ôºå‰ΩøÁî®ÈªëËâ≤ÂõæÊ†á")
                android.R.drawable.ic_menu_sort_by_size
            }
            skuCode.contains("ÁôΩËâ≤", true) -> {
                Log.d("WMS_LOCATION", "ü§ç Ê£ÄÊµãÂà∞ÁôΩËâ≤Ôºå‰ΩøÁî®ÁôΩËâ≤ÂõæÊ†á")
                android.R.drawable.ic_menu_gallery
            }
            skuCode.contains("Á∫¢Ëâ≤", true) -> {
                Log.d("WMS_LOCATION", "‚ù§Ô∏è Ê£ÄÊµãÂà∞Á∫¢Ëâ≤Ôºå‰ΩøÁî®Á∫¢Ëâ≤ÂõæÊ†á")
                android.R.drawable.ic_menu_delete
            }
            skuCode.contains("ËìùËâ≤", true) -> {
                Log.d("WMS_LOCATION", "üíô Ê£ÄÊµãÂà∞ËìùËâ≤Ôºå‰ΩøÁî®ËìùËâ≤ÂõæÊ†á")
                android.R.drawable.ic_menu_info_details
            }
            skuCode.contains("ÁªøËâ≤", true) -> {
                Log.d("WMS_LOCATION", "üíö Ê£ÄÊµãÂà∞ÁªøËâ≤Ôºå‰ΩøÁî®ÁªøËâ≤ÂõæÊ†á")
                android.R.drawable.ic_menu_add
            }
            skuCode.contains("ÈªÑËâ≤", true) -> {
                Log.d("WMS_LOCATION", "üíõ Ê£ÄÊµãÂà∞ÈªÑËâ≤Ôºå‰ΩøÁî®ÈªÑËâ≤ÂõæÊ†á")
                android.R.drawable.ic_menu_edit
            }
            skuCode.contains("Âç°ÂÖ∂Ëâ≤", true) -> {
                Log.d("WMS_LOCATION", "ü§é Ê£ÄÊµãÂà∞Âç°ÂÖ∂Ëâ≤Ôºå‰ΩøÁî®Âç°ÂÖ∂Ëâ≤ÂõæÊ†á")
                android.R.drawable.ic_menu_upload
            }
            skuCode.contains("Êú¨Ëâ≤", true) -> {
                Log.d("WMS_LOCATION", "ü§ç Ê£ÄÊµãÂà∞Êú¨Ëâ≤Ôºå‰ΩøÁî®Êú¨Ëâ≤ÂõæÊ†á")
                android.R.drawable.ic_menu_view
            }
            skuCode.startsWith("TEST", true) -> {
                Log.d("WMS_LOCATION", "üß™ Ê£ÄÊµãÂà∞ÊµãËØïSKUÔºå‰ΩøÁî®ÊµãËØïÂõæÊ†á")
                android.R.drawable.ic_menu_search
            }
            else -> {
                Log.d("WMS_LOCATION", "üéØ ‰ΩøÁî®ÈªòËÆ§ÂõæÊ†áÈÄâÊã©ÈÄªËæë")
                // ÂØπ‰∫éÂÖ∂‰ªñSKUÔºå‰ΩøÁî®ÂìàÂ∏åÂÄºÈÄâÊã©ÂõæÊ†á
                val availableImages = listOf(
                    android.R.drawable.ic_menu_gallery,
                    android.R.drawable.ic_menu_preferences,
                    android.R.drawable.ic_menu_share,
                    android.R.drawable.ic_menu_send,
                    android.R.drawable.ic_menu_save,
                    android.R.drawable.ic_menu_recent_history,
                    android.R.drawable.ic_menu_rotate,
                    android.R.drawable.ic_menu_manage
                )
                val index = Math.abs(skuCode.hashCode()) % availableImages.size
                availableImages[index]
            }
        }
        
        Log.d("WMS_LOCATION", "üñºÔ∏è SKU ${skuCode} ÊúÄÁªàÈÄâÊã©ÂõæÊ†á: $drawable")
        return drawable
    }
    
}